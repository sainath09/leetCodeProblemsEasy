tion for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int heightFunc(TreeNode* root){
        int lheight=0;
        int rheight=0;
        if(root==NULL)
            return 0;
        else
             lheight=heightFunc(root->left)+1;
             rheight=heightFunc(root->right)+1;
             return max(lheight,rheight);
    }
    void levelOrder(vector<int>& iVec,TreeNode* root,int level){
        if(root==NULL) iVec.push_back(0);
        else if(level==1) iVec.push_back(root->val);
        else{
            levelOrder(iVec,root->left,level-1);
            levelOrder(iVec,root->right,level-1);
        }
    }
    bool isPalindrome(vector<int> & iVec){
        int i=0;
        int j=iVec.size()-1;
        while(i<j){
            if(iVec[i]!=iVec[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    bool isSymmetric(TreeNode* root) {
        int height=heightFunc(root);
        if (root==NULL) return true;
        vector<int> iVec;
        for(int i=1;i<=height;i++){
            levelOrder(iVec,root,i);
            if(!isPalindrome(iVec)) return false;
            iVec.clear();
        }
        return true;;

    }
};
